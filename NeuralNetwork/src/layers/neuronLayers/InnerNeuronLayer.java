package layers.neuronLayers;

import neurons.*;

/**
 * This is an extension of Layer and is used as InnerLayers (Layers in between
 * the first (Input) and the last (Output)) in a NeuronBasedNeuralNetwork.
 * 
 * @author OdinhengeT
 * @see NeuralNetwork
 * @see NeuronBasedNeuralNetwork
 * @see NeuronLayer
 * @see InputNeuronLayer
 * @see OutputNeuronLayer
 * @see Neuron
 */
public class InnerNeuronLayer extends NeuronLayer {

	/**
	 * Creates an InnerLayer with nbrNeurons Neurons (excluding BiasNeuron), each
	 * with nbrLinks links.
	 * 
	 * @param nbrLinks number of links each Neuron has
	 */
	public InnerNeuronLayer(int nbrNeurons, int nbrLinks) {
		super(nbrNeurons, nbrLinks);
		neurons = new Neuron[nbrNeurons + 1]; // Add one for the BiasNeuron
		for (int i = 0; i < neurons.length; i++) {
			neurons[i] = new InnerNeuron(nbrLinks);
			neurons[i].createWeights(nbrNeurons);
		}
		neurons[nbrNeurons] = new BiasNeuron(nbrLinks);
		neurons[nbrNeurons].createWeights(nbrNeurons);
	}

	/**
	 * Returns the output generated by this InnerLayer, an array containing the sum
	 * of each of the Neurons outputs in this layer to each Neuron in the next.
	 * 
	 * @return output of this Layer
	 */
	public double[] getOutput() {
		double[] output = new double[nbrLinks];
		for (Neuron n : neurons) {
			for (int i = 0; i < nbrLinks; i++) {
				output[i] += n.getOutputTo(i);
			}
		}
		return output;
	}

	/**
	 * Returns a String representation of this InnerLayer.
	 * 
	 * @return a String describing this Layer
	 */
	public String toString() {
		StringBuilder sb = new StringBuilder("InnerLayer: ");
		for (Neuron n : neurons) {
			sb.append(n.toString());
		}
		return sb.toString();
	}

}
