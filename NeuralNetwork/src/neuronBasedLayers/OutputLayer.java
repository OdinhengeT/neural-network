package neuronBasedLayers;

import neurons.*;

/**
 * This is an extension of Layer and is used as OutputLayers (the last Layer) in
 * a NeuronBasedNeuralNetwork.
 * 
 * @author OdinhengeT
 * @see NeuralNetwork
 * @see NeuronBasedNeuralNetwork
 * @see Layer
 * @see InputLayer
 * @see InnerLayer
 * @see Neuron
 */
public class OutputLayer extends Layer {

	/**
	 * Creates an OutputLayer with nbrNeurons Neurons (an OutputLayer has no
	 * BiasNeuron), each with zero links.
	 * 
	 * @param nbrNeurons number of Neurons in Layer
	 */
	public OutputLayer(int nbrNeurons) {
		super(nbrNeurons, 0);
		neurons = new Neuron[nbrNeurons];
		for (int i = 0; i < neurons.length; i++) {
			neurons[i] = new OutputNeuron();
		}
	}

	/**
	 * Returns the output generated by this OutputLayer, an array containing the
	 * output by each OutputNeuron in this Layer.
	 * 
	 * @return output of this Layer
	 */
	public double[] getOutput() {
		double[] output = new double[nbrNeurons];
		for (int i = 0; i < nbrNeurons; i++) {
			output[i] = neurons[i].getOutput();
		}
		return output;
	}

	/**
	 * Overrides the updateWeights(double[][]) method in Layer. This method should
	 * not ever be called on an OutputLayer because this Layer has no weights.
	 * 
	 * @throws IllegalCallerException if called
	 */
	public void updateWeights(double[][] deltaWeights) {
		throw new IllegalCallerException("updateWeights called on an OutputLayer");
	}

	/**
	 * Returns a String representation of this OutputLayer.
	 * 
	 * @return a String describing this Layer
	 */
	public String toString() {
		StringBuilder sb = new StringBuilder("OutputLayer: ");
		for (Neuron n : neurons) {
			sb.append(n.toString());
		}
		return sb.toString();
	}

}
